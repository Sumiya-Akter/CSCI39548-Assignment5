{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["searchAPI","props","handleInputChange","event","setState","Zip","target","value","handleSearchClick","a","ZipCode","state","linkToAPI","console","log","axios","get","response","apiData","data","found","status","makeTable","currData","foundMatch","table","i","length","State","EstimatedPopulation","TotalWages","push","City","id","className","type","this","placeholder","onChange","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySAwFeA,E,kDAhFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IASRC,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CAAEC,IAAKF,EAAMG,OAAOC,SAXjB,EAenBC,kBAfmB,sBAeC,gCAAAC,EAAA,6DACdC,EAAU,EAAKC,MAAMN,IAErBO,EAAY,yCAA2CF,EAC3DG,QAAQC,IAAI,EAAKH,MAAMN,KAJL,kBAMKU,IAAMC,IAAIJ,GANf,OAMZK,EANY,OAOhB,EAAKb,SAAS,CAACc,QAASD,EAASE,KAAMC,OAAO,IAP9B,kDASZ,KAAMH,WACRJ,QAAQC,IAAI,eAAgB,KAAMG,SAASE,MAC3CN,QAAQC,IAAI,iBAAkB,KAAMG,SAASI,QAC7C,EAAKjB,SAAS,CAACgB,OAAO,KAZR,0DAfD,EAgCnBE,UAAY,WACV,IAAIC,EAAW,EAAKZ,MAAMO,QAC1BL,QAAQC,IAAI,YAAaS,GACzB,IAAIC,EAAa,EAAKb,MAAMS,MAC5BP,QAAQC,IAAI,UAAWU,GACvB,IAAIC,EAAQ,GAEZ,GAAID,EAIG,CACH,IAAK,IAAIE,EAAI,EAAGA,EAAIH,EAASI,OAAQD,IACnCb,QAAQC,IAAI,UAAWS,EAASG,GAAGE,OACnCf,QAAQC,IAAI,eAAgBS,EAASG,GAAGG,qBACxChB,QAAQC,IAAI,UAAWS,EAASG,GAAGI,YACnCL,EAAMM,KACJ,+BACE,wCAAWR,EAASG,GAAGM,QACvB,yCAAYT,EAASG,GAAGE,SACxB,+CAAkBL,EAASG,GAAGI,cAC9B,wDAA2BP,EAASG,GAAGG,yBAJhCN,EAASG,GAAGO,KAQzB,OAAOR,EAfP,OAFAZ,QAAQC,IAAI,mBACZW,EAAMM,KAAK,6BAAa,8CAAH,IACdN,GAxCX,EAAKd,MAAQ,CACXO,QAAS,GACTb,IAAK,GACLe,OAAO,GALQ,E,0CA6DnB,WACE,OACE,sBAAKc,UAAU,MAAf,UACE,sBAAKA,UAAU,aAAf,UACE,mDACA,uBAAOC,KAAK,OAAO5B,MAAO6B,KAAKzB,MAAMN,IAAKgC,YAAY,WAAWC,SAAUF,KAAKlC,oBAChF,wBAAQgC,UAAU,aAAaK,QAASH,KAAK5B,kBAA7C,uBAEF,uBACQ,uBAAOyB,GAAG,OAAV,SACI,gCACCG,KAAKd,uB,GAzEFkB,aCKTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a6c364a1.chunk.js","sourcesContent":["import { Component } from 'react';\r\nimport './App.css';\r\n// eslint-disable-next-line\r\nimport axios from 'axios';\r\n\r\n\r\n//creates array for api data, an open string for City and state is set to false until found\r\nclass searchAPI extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      apiData: [],\r\n      Zip: \"\",\r\n      found: false\r\n    }\r\n  }\r\n\r\n  //function for what happens when you input the zip code\r\n  handleInputChange = (event) => {\r\n    this.setState({ Zip: event.target.value});\r\n  }\r\n\r\n//function for what happens when you click the search button\r\n  handleSearchClick = async() => {\r\n    let ZipCode = this.state.Zip;\r\n    // eslint-disable-next-line\r\n    let linkToAPI = 'https://ctp-zip-api.herokuapp.com/zip/' + ZipCode;\r\n    console.log(this.state.Zip);\r\n    try {\r\n      let response = await axios.get(linkToAPI);\r\n      this.setState({apiData: response.data, found: true})\r\n    } catch (error) {\r\n      if (error.response) {\r\n        console.log(\"Error Data: \", error.response.data); //Not found\r\n        console.log(\"Error Status: \", error.response.status); //404\r\n        this.setState({found: false});\r\n      }\r\n    }\r\n  }\r\n\r\n  makeTable = () => {\r\n    let currData = this.state.apiData;\r\n    console.log(\"apiData: \", currData);\r\n    let foundMatch = this.state.found;\r\n    console.log(\"match: \", foundMatch);\r\n    let table = [];\r\n    //found is false when we get 404 error\r\n    if(!foundMatch){\r\n        console.log(\"No result found\");\r\n        table.push(<tr key={-1}><td>No Results</td></tr>);\r\n        return table;\r\n    } else {\r\n        for (let i = 0; i < currData.length; i++) {\r\n          console.log(\"State: \", currData[i].State);\r\n          console.log(\"Population: \", currData[i].EstimatedPopulation);\r\n          console.log(\"Wages: \", currData[i].TotalWages);\r\n          table.push(\r\n            <tr key={currData[i].id}>\r\n              <td>City: {currData[i].City}</td>\r\n              <td>State: {currData[i].State}</td>\r\n              <td>Total Wages: {currData[i].TotalWages}</td>\r\n              <td>Estimated Population: {currData[i].EstimatedPopulation}</td>\r\n            </tr>\r\n          );\r\n        }\r\n        return table;\r\n    }\r\n}   \r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"App-header\">\r\n          <h3>Zip Code Search: </h3>\r\n          <input type=\"text\" value={this.state.Zip} placeholder=\"zip code\" onChange={this.handleInputChange}/>\r\n          <button className=\"search-zip\" onClick={this.handleSearchClick}>Search</button>\r\n        </div>\r\n        <br/>\r\n                <table id=\"data\">\r\n                    <tbody>\r\n                    {this.makeTable()}\r\n                    </tbody>\r\n                </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default searchAPI;\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}